// 04.Var.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

// int main() 
// { <= 를 시작으로 한줄 한줄 읽으면서 코드를 실행하고
// } 만나게 되면 끝난다.

// 이러한 것을 함수라고 하는데.
// 함수는 => 일련의 실행흐름 제어흐름에 이름을 
// 이름을 붙이는 것을 말한다.
// main이라는 이름의 실행흐름이 존재하는것이다.
// 프로그래머들끼리의 약속으로
// main이라고 하는 실행흐름은 c++
// 무조건 최초로 시작되는 실행흐름이라고 약속했다.

// 컴파일개념으로 코드를 읽는다면
// 컴파일 과정을 읽는법은 코드의 가장 위쪽부터 시작해서 아래로 읽고

// 실행흐름으로서 읽는다면
// main에서부터 실행되는 과정을 읽으면 된다.

#include <iostream>

int main()
{
    // 이 내부에 있는 코드도 전부다 실행된 프로세스 내부에 다 들어있어야 하고.

    // 내가 이제부터 게임을 만들고 싶어.
    // Player를 만들고 뭔가를 하고 싶어.
    // 변수를 선언하는 문법은 2가지 요소로 이루어지게 되는데.
    // int <= 크기와 형태
    // HP <= 위치
    // int라고 하는 기호는 == 4바이트를 사용하겠다는 
    //                       8비트 => 1바이트
    // 그것의 이름을 => HP라고 하겠다.
    // HP는 어떻게 해석되느냐? 
    // HP=> 추후 400번지가 된다.
    // 고급언어는 이런 주소값들이나 어려운 개념들을 모두다 자동으로 처리해줍니다.
    int HP;

    // = 연산자.
    // 400번지 연산 = 200
    // 200 => 상수
    int ATT;
    int DEF;

    // int는 4바이트 정수로서 처리가 됩니다.
}



// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
