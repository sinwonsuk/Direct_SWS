// 12.Character.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

// 문자의 기본 체계.

int main()
{
    {
        //printf("abcdefg");
        //printf("하ㅓ호호");
        //printf("잘되염");

        // int Array[10];

        // 숫자의 배열
        // { 10, 20, 30, 40 };

        char Value = 'a';
        // 정수와 매칭방식이다.
        // 모든언어가 문자를 표현하는 방식은 정수와의 매칭이다.
        // 기본적으로는 숫자야.
        // 처리형태가 문자형에 들어가는 순간.

        // char은 1바이트 문자형
        // 문자형을 사용해야.
        int ValueInt = 'a';

        // 최초의 문자 처리방식인 아스키가 만들어졌다.
        // 아스키는 1바이트에 담을수 있는 알파뱃과 특수기호로 문자를 처리하는 것이고
        // 모든 문자의 기본이 되었다.

        int a = 0;
    }

    {
        unsigned __int8 Value = 0b11111111;
        int size = sizeof(unsigned __int8);

        // 1. 아스키
        // 최초의 아스키는 0~255 매칭시킬수 있었고 
        // 알파뱃을 모든글자를 다 표현할수 있었어

        // 문자열이라고 합니다.
        // 문자열은 출력하는 일이 잦고
        // 출력을할때 끝을 알수 있어야 하기 때문에
        // 내가 이와같이 "안녕하세요" 문자열 상수를 만들면
        // 끝을 알기 위해서 마지막에 0을 붙여주는 것이 정해졌다.
        //              979797979797979797979797 0
        char ArrChar[11] = {"aaaaaaaaaa"};
        char ArrChar2[11] = { 97,97,97,97,97,97,97,97,97,97,97 };

        int a = 0;
    }

    {
        // ansi 문자체계 == 멀티바이트 문자체계라고 합니다.
        // 아스키로는 불가능한 각 국가별 문자체계를 위해서 만들어진 인코딩(문자체계) 방식.
        char ArrChar1[11] = { "안녕하세요" };

        char ArrChar2[11] = { "aa녕하세요" };

        char cccc = '안';

        int a = '안';

        // 유니코드 문자체계 == 와이드바이트 문자체계라고 합니다.
        // 2바이트 문자형.
        // 앞에 L을 붙이는 것이 기본이다.
        wchar_t wchar = L'a';

        wchar_t wcharArr1[4] = {L"안녕하"};
        // wchar_t wcharArr2[4] = { L"aaaa" };
    }

    {
        // 이 ansi와 멀티바이트에는 문제점이 있는데.
        // 이 2바이트로 세계의 모든 글자를 표현할수 없다는 것이다.

        // UTF-8
        // UTF-16
        // 같은 문자 인코딩 체계가 만들어졌다.

        char ARR[100] = { u8"안녕하세요" };


        int a = 0;
    }
}
