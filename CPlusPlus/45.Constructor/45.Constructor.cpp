// 45.Constructor.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

// 초기화의 정의
// 메모리가 생성됨과 동시에 값을 입력해주는것
// 대입은
// 초기화 이후 값을 입력해주는것. 

// 현업에서는 아직 사용되지 않고 있습니다.

// 클래스의 경우에는 맴버변수가 먼저 이름을 가지고
// 그다음에 무조건 맴버 함수가 컴파일 되기 때문에
// 맴버변수가 꼭 위에 올라가 있어야할 필요는 없다.
class A 
{

public:
    // 1. 클래스 이름과 완전히 동일한 함수만 생성자로 인정
    // 2. 인자를 넣을수 있습니다.
    // 3. 생성자는 만드는 방식을 정의 내린다.
    //    생성자로 정의된 방식 이외의 방식은 사용할 수가 없다.
    // 4. 생성자는 분명히 함수인데. 리턴값이 없어요.
    //    무조건 자기자신의 값형을 리턴하기 때문이다.
    // 5. 일반적인 맴버함수처럼 호출할수 없다.
    A(int _Value) 
        // 맴버 이니셜라이저 문법이라고 합니다.
        // 이걸 통해서 초기화를 합니다.
        : Value0(_Value)
        // , Value1(0)
    {
        // 생성자 함수 내부에서 이렇게 값을 넣는것은
        // 초기화라고 하지 않고 대입이라고 합니다.
        // Value = _Value;
        Value0 = 10;
        this;
    }

    A()
        : Value0(0)
        , Value1(0)
    {
        // Value = 0;
    }

public:
    int Value0 = 0; // 리터럴 초기화라고 하는 최신문법입니다.
    int Value1 = 5;

};

class Test
{
// private:

// 생성자를 아무것도 만들지 않으면
//public:
//    Test()
//    {
//    }
};

int main()
{
    // 전역함수같은 특징도 가진다.
    Test();

    Test TTT = Test();

    // 일반적인 맴버함수처럼 호출할수 없다.
    // 생성자는 그냥 호출할수 없어.
    // TTT.Test();

    // int NewValue = int(10);

    int NewValue = 10;

    // 리스트 이니셜라이저 문법이 사용가능했어.
    // A NewA = { 10 };

    // A NewA = A();

    A NewA = 10;

    std::cout << "Hello World!\n";
}
