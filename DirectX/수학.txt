모든 변환은 우리들이 상식적으로 생각하는 대로 될려면

로컬스페이스는 점으로 이루어진 물체의 초기 공간을 
로컬 스페이스

크자이 순서로 되야 한다.

크기변환 벡터의 곱샘을 통해서 모든 버텍스에 *가 되는 겁니다.

이동변환 벡터의 덧샘을 이용해서 모든 버텍스에 +가 되는 겁니다.

이렇게 크기 자전 이동이 다 적용된 상태의 공간을 월드 스페이스라고 부릅니다.

이 월드 스페이스 변환을 할때 연산량을 줄이고 월드스페이스라는 공간을 단하나의 공식으로 표현하기 위해서

행렬이라는걸 사용하게 되는데.

// y*x로 모아놓은 숫자를 행렬이라고 합니다.

벡터는 어떠한 행렬이죠?
[][][][] 1x4행렬로 본다.

3차원의 크기 회전 이동 행렬 1개로 표현하기 위해서는 4x4행렬을 사용해야 하기 때문에
4x4 행렬이 3d수학에서 사용되는 행렬이 되었다.

// 이거 믿으면 안됩니다.
[x][y][z][] <= 크기
[x][y][z][] <= 회전
[x][y][z][] <= 위치

[][][][]
[][][][]
[][][][]
[][][][]

행렬에서 가장 많이 이용되는 수식은 행려의 곱샘인데.
행렬의 곱샘은 조건이 존재한다.
행렬곱샘의 조건 => 행렬2개가 있다고 쳤을때 a b행렬이 

a ay*ax행렬
b by*bx행렬

ax by 같아야 곰샘이 성립합니다.
그렇게 해서 나온 결과행렬은 
ay * bx크기의 행렬이 나오게 됩니다.

예를 들어서 벡터가 1개 있다고 치자.
a
[00][10][20][30] 1*4 행렬이고

b
[00][10][20][30] 4*4 행렬이있다고 쳤을때
[01][11][21][31]
[02][12][22][32]
[03][13][23][33]

a * b = 1*4 행렬이 나오게 된다.
행렬의 곱샘에서 여러분들이 주의할 점이 있는데.
행렬은 교환법칙이 성립하지 않습니다.

1 * 2 == 2 * 1을 하나 둘은 결과가 같죠?
행렬간의 곱샘에서는
행렬의 곱샘을 할때는 순서에 주의해서 해야 합니다.


행렬과 행렬의 곱의 결과물은

x = [a00][a10][a20][a30] * [b00][b01][b02][b03]

x = [a00] * [b00] + [a10] * [b01] + [a20] * [b02] + [a30] * [b03]
y = [a00] * [b00] + [a10] * [b01] + [a20] * [b02] + [a30] * [b03]


a                  *   b
[00][10][20][30]       [00][10][20][30]
[01][11][21][31]	   [01][11][21][31]
[02][12][22][32]	   [02][12][22][32]
[03][13][23][33]	   [03][13][23][33]


// 핵심개념 항등행렬
[1][0][0][0] 
[0][1][0][0] 
[0][0][1][0] 
[0][0][0][1] 

// 핵심개념 제로행렬
[0][0][0][0] 
[0][0][0][0] 
[0][0][0][0] 
[0][0][0][0]  

// 회전행렬의 핵심개념
// 회전행렬은 3x3으로 표현할수 있다.
// 중요한건
// 각 축이 서로간에 수직이라면
// 길이가 1인 벡터들로 이루어져있다면
// 회전행렬이 성립한다.

[1][0][0] x
[0][1][0] y
[0][0][1] z

[1][0][0] x
[0][1][0] y
[0][0][1] z

 

// 점들.          윈도우 좌표계를 기준으로
로컬 스페이스 => 월드 스페이스
//               우리가 생각하는 게임의 공간이다.
